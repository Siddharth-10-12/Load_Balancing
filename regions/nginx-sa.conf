worker_processes auto;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict health_status 1m;  # Shared memory for tracking health
    resolver 127.0.0.11 valid=30s;

    init_worker_by_lua_block {
        local health = ngx.shared.health_status
        if not health then
            ngx.log(ngx.ERR, "Shared dictionary 'health_status' not found")
            return
        end
        health:set("edge_sa_1_latency", 100)  -- Default latency
        health:set("edge_sa_2_latency", 100)
        health:set("edge_sa_3_latency", 100)
    }

    upstream sa_edge_servers {
        server edge_sa_1:80;
        server edge_sa_2:80;
        server edge_sa_3:80;
    }

    server {
        listen 80;

        # Debug Endpoint for Testing
        location /debug {
            default_type text/plain;
            return 200 "Region: South America\nUpstream: sa_edge_servers\n";
        }

        # Proxy Requests to Edge Servers Based on Latency
        location / {
            set_by_lua_block $target {
                local health = ngx.shared.health_status
                if not health then
                    ngx.log(ngx.ERR, "Shared dictionary 'health_status' not found in set_by_lua_block")
                    return nil
                end

                local servers = {"edge_sa_1", "edge_sa_2", "edge_sa_3"}
                local best_server, best_time = nil, math.huge

                for _, server in ipairs(servers) do
                    local latency = health:get(server .. "_latency") or math.huge
                    if latency < best_time then
                        best_server, best_time = server, latency
                    end
                end

                return best_server
            }

            proxy_pass http://$target;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
