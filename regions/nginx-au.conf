worker_processes auto;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict health_status 1m;  # Shared memory for tracking health
    resolver 127.0.0.11 valid=30s;

    init_worker_by_lua_block {
        local health = ngx.shared.health_status
        -- Initial Q-values (reward scores for each server)
        health:set("edge_au_1_q", 1.0)
        health:set("edge_au_2_q", 1.0)
        health:set("edge_au_3_q", 1.0)
    }

    upstream au_edge_servers {
        server edge_au_1:80;
        server edge_au_2:80;
        server edge_au_3:80;
        
        balancer_by_lua_block {
            local health = ngx.shared.health_status
            local servers = {"edge_au_1", "edge_au_2", "edge_au_3"}
            local best_server, highest_q = nil, -math.huge
            local exploration_rate = 0.2  -- 20% chance to explore

            -- Decide exploration vs exploitation
            if math.random() < exploration_rate then
                -- Exploration: Pick a random server
                best_server = servers[math.random(#servers)]
            else
                -- Exploitation: Pick the best Q-value server
                for _, server in ipairs(servers) do
                    local q_value = health:get(server .. "_q") or 1.0
                    if q_value > highest_q then
                        best_server, highest_q = server, q_value
                    end
                end
            end

            -- Set chosen server
            if best_server then
                ngx.var.target = best_server
            end
        }
    }

    server {
        listen 80;

        location / {
            set $target "";
            proxy_pass http://$target;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            log_by_lua_block {
                local health = ngx.shared.health_status
                local target = ngx.var.target
                local latency = tonumber(ngx.var.upstream_response_time) or 100

                -- Update Q-value using Q-learning formula
                local old_q = health:get(target .. "_q") or 1.0
                local learning_rate = 0.1
                local discount_factor = 0.9
                local reward = 1 / (latency + 1)  -- Higher reward for lower latency

                local new_q = old_q + learning_rate * (reward + discount_factor * old_q - old_q)
                health:set(target .. "_q", new_q)
            }
        }
    }
}
